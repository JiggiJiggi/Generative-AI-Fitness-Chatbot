# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16UqJOPHO_jklTpDQmQZ6RE7IWRtnQy7u
"""

!pip install fastapi

!pip install uvicorn

from fastapi import FastAPI, HTTPException
from transformers import pipeline
import requests

app = FastAPI()

# Load a locally hosted NLP model for chatbot responses
# Using Hugging Face's pipeline with the GPT-Neo model for conversational purposes
chatbot_pipeline = pipeline("text-generation", model="EleutherAI/gpt-neo-1.3B")

# Base URL for our workout API
WORKOUT_API_URL = "http://127.0.0.1:8000"

# Example prompts to guide the chatbot's responses
PROMPTS = {
    "welcome": "Hello! I'm your AI-powered fitness assistant. I can help you create customized workout plans. Let's get started!",
    "ask_name": "What's your name?",
    "ask_gender": "Are you male or female?",
    "ask_goal": "What is your main fitness goal? Weight loss or muscle gain?",
    "ask_experience": "How would you rate your experience level? Beginner, intermediate, or advanced?",
    "ask_age": "How old are you?",
    "ask_weight": "What's your weight in kg?",
    "goodbye": "Thank you for using the fitness assistant. Have a great workout!"
}

# Store conversation state (in-memory, should use a database in production)
conversation_state = {}

# Helper function to interact with the workout API
def create_user_profile(username, gender, age, weight, experience_level, goal):
    try:
        response = requests.post(f"{WORKOUT_API_URL}/users/create", json={
            "username": username,
            "gender": gender,
            "age": age,
            "weight": weight,
            "experience_level": experience_level,
            "goal": goal
        })
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        return {"error": str(e)}

def generate_workout_plan(username):
    try:
        response = requests.get(f"{WORKOUT_API_URL}/workout/{username}")
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        return {"error": str(e)}

# Endpoint to start conversation with the chatbot
@app.get("/chat")
def chat_with_user(user_message: str, username: str):
    # Initialize or retrieve user's conversation state
    user_state = conversation_state.get(username, {"step": "welcome"})

    # Conversation flow based on current step
    if user_state["step"] == "welcome":
        response = PROMPTS["welcome"]
        user_state["step"] = "ask_name"

    elif user_state["step"] == "ask_name":
        user_state["username"] = user_message
        response = PROMPTS["ask_gender"]
        user_state["step"] = "ask_gender"

    elif user_state["step"] == "ask_gender":
        user_state["gender"] = user_message.lower()
        response = PROMPTS["ask_goal"]
        user_state["step"] = "ask_goal"

    elif user_state["step"] == "ask_goal":
        user_state["goal"] = user_message.lower()
        response = PROMPTS["ask_experience"]
        user_state["step"] = "ask_experience"

    elif user_state["step"] == "ask_experience":
        user_state["experience_level"] = user_message.lower()
        response = PROMPTS["ask_age"]
        user_state["step"] = "ask_age"

    elif user_state["step"] == "ask_age":
        try:
            user_state["age"] = int(user_message)
            response = PROMPTS["ask_weight"]
            user_state["step"] = "ask_weight"
        except ValueError:
            response = "Please provide a valid age."

    elif user_state["step"] == "ask_weight":
        try:
            user_state["weight"] = float(user_message)

            # Save the profile using the workout API
            profile = create_user_profile(
                username=user_state["username"],
                gender=user_state["gender"],
                age=user_state["age"],
                weight=user_state["weight"],
                experience_level=user_state["experience_level"],
                goal=user_state["goal"]
            )

            if "error" in profile:
                response = f"An error occurred while creating your profile: {profile['error']}"
            else:
                # Generate a workout plan
                plan = generate_workout_plan(username=user_state["username"])
                if "error" in plan:
                    response = f"An error occurred while generating your workout plan: {plan['error']}"
                else:
                    response = f"Your workout plan is ready! Here are the details: {plan}"

            # Clear conversation state after workout plan is generated
            conversation_state.pop(username, None)

        except ValueError:
            response = "Please provide a valid weight in kg."

    else:
        response = PROMPTS["goodbye"]
        conversation_state.pop(username, None)

    # Update user state
    conversation_state[username] = user_state

    # Generate a conversational response with a fallback
    try:
        chatbot_response = chatbot_pipeline(f"User: {user_message}\nAssistant: {response}", max_length=100, num_return_sequences=1)[0]["generated_text"]
    except Exception as e:
        chatbot_response = f"Sorry, there was an error generating a response: {str(e)}"

    # Return chatbot's response
    return {"response": chatbot_response}

